{"ast":null,"code":"// import React, { useState } from 'react';\n// import '../../css/SurveyCreationForm.css';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\n// const SurveyCreationForm = () => {\n//   const [formData, setFormData] = useState({\n//     title: '',\n//     description: '',\n//     questions: [{ questionText: '', answers: [''] }]\n//   });\n\n//   const navigate = useNavigate();\n\n//   const handleInputChange = (e, index, answerIndex) => {\n//     const { name, value } = e.target;\n//     if (name === 'question') {\n//       const questions = [...formData.questions];\n//       questions[index].questionText = value;\n//       setFormData({ ...formData, questions });\n//     } else if (name === 'answer') {\n//       const questions = [...formData.questions];\n//       questions[index].answers[answerIndex] = value;\n//       setFormData({ ...formData, questions });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   const addQuestion = () => {\n//     setFormData({\n//       ...formData,\n//       questions: [...formData.questions, { questionText: '', answers: [''] }]\n//     });\n//   };\n\n//   const addAnswer = (index) => {\n//     const questions = [...formData.questions];\n//     questions[index].answers.push('');\n//     setFormData({ ...formData, questions });\n//   };\n\n//   const removeQuestion = (index) => {\n//     const questions = [...formData.questions];\n//     questions.splice(index, 1);\n//     setFormData({ ...formData, questions });\n//   };\n\n//   const removeAnswer = (questionIndex, answerIndex) => {\n//     const questions = [...formData.questions];\n//     questions[questionIndex].answers.splice(answerIndex, 1);\n//     setFormData({ ...formData, questions });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       // Step 1: Create the survey\n//       const surveyResponse = await fetch('http://localhost:3001/surveys', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           title: formData.title,\n//           description: formData.description\n//         })\n//       });\n\n//       if (!surveyResponse.ok) {\n//         throw new Error('Error creating survey');\n//       }\n\n//       const surveyData = await surveyResponse.json();\n//       const survey_id = surveyData.survey_id;\n\n//       // Step 2: Add questions and answers\n//       for (let i = 0; i < formData.questions.length; i++) {\n//         const question = formData.questions[i];\n\n//         // Add question\n//         const questionResponse = await fetch(`http://localhost:3001/questions/${survey_id}`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify({\n//             questionText: question.questionText\n//           })\n//         });\n\n//         if (!questionResponse.ok) {\n//           throw new Error('Error adding question');\n//         }\n\n//         const questionData = await questionResponse.json();\n//         const questionId = questionData.question_id;\n\n//         // Add answers\n//         for (let j = 0; j < question.answers.length; j++) {\n//           const answer = question.answers[j];\n\n//           const answerResponse = await fetch(`http://localhost:3001/answers/${questionId}`, {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//               answerText: answer\n//             })\n//           });\n\n//           if (!answerResponse.ok) {\n//             throw new Error('Error adding answer');\n//           }\n//         }\n//       }\n\n//       // Step 3: Send emails to customers\n//       const emailResponse = await fetch('http://localhost:3001/send-emails', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           surveyId: survey_id\n//         })\n//       });\n\n//       if (!emailResponse.ok) {\n//         throw new Error('Error sending emails');\n//       }\n\n//       alert('Survey created and emails sent successfully!');\n//       setFormData({\n//         title: '',\n//         description: '',\n//         questions: [{ questionText: '', answers: [''] }]\n//       });\n\n//       // Redirect to the SurveyLandingPage with the new surveyId\n//       navigate(`/survey/${survey_id}`);\n\n//     } catch (error) {\n//       console.error('Error:', error);\n//       alert('Error creating survey');\n//     }\n//   };\n\n//   return (\n//     <div className=\"SurveyCreationForm\">\n//       <h1>יצירת סקר</h1>\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"form-groupSCF\">\n//           <label htmlFor=\"title\" className=\"required\">כותרת הסקר</label>\n//           <input\n//             type=\"text\"\n//             id=\"title\"\n//             name=\"title\"\n//             value={formData.title}\n//             onChange={handleInputChange}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-groupSCF\">\n//           <label htmlFor=\"description\" >תיאור הסקר</label>\n//           <textarea\n//             id=\"description\"\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleInputChange}\n//             required\n//           />\n//         </div>\n//         {formData.questions.map((q, index) => (\n//           <div key={index} className=\"form-groupSCF\">\n//             <label className=\"required\">שאלה {index + 1}</label>\n//             <div className=\"question-containerSCF\">\n//               <input\n//                 type=\"text\"\n//                 name=\"question\"\n//                 value={q.questionText}\n//                 onChange={(e) => handleInputChange(e, index)}\n//                 required\n//               />\n//               <button type=\"button\" onClick={() => removeQuestion(index)}>\n//                 X\n//               </button>\n//             </div>\n//             <label className='required'> תשובות: </label>\n//             {q.answers.map((answer, answerIndex) => (\n//               <div key={answerIndex} className=\"answer-containerSCF\">\n//                 <input\n//                   type=\"text\"\n//                   name=\"answer\"\n//                   value={answer}\n//                   onChange={(e) => handleInputChange(e, index, answerIndex)}\n//                   required\n//                 />\n//                 <button type=\"button\" onClick={() => removeAnswer(index, answerIndex)}>\n//                   X\n//                 </button>\n//               </div>\n//             ))}\n//             <button type=\"button\" onClick={() => addAnswer(index)}>הוסף תשובה</button>\n//           </div>\n//         ))}\n//         <button type=\"button\" onClick={addQuestion}>הוסף שאלה</button>\n//         <div>\n//           <button type=\"submit\">סיים ושלח</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default SurveyCreationForm;","map":{"version":3,"names":[],"sources":["/Users/danatorgovitsky/Desktop/Project/Triangle/my-app/src/pages/Survey/SurveyCreationForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import '../../css/SurveyCreationForm.css';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const SurveyCreationForm = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     title: '',\r\n//     description: '',\r\n//     questions: [{ questionText: '', answers: [''] }]\r\n//   });\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleInputChange = (e, index, answerIndex) => {\r\n//     const { name, value } = e.target;\r\n//     if (name === 'question') {\r\n//       const questions = [...formData.questions];\r\n//       questions[index].questionText = value;\r\n//       setFormData({ ...formData, questions });\r\n//     } else if (name === 'answer') {\r\n//       const questions = [...formData.questions];\r\n//       questions[index].answers[answerIndex] = value;\r\n//       setFormData({ ...formData, questions });\r\n//     } else {\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n//   const addQuestion = () => {\r\n//     setFormData({\r\n//       ...formData,\r\n//       questions: [...formData.questions, { questionText: '', answers: [''] }]\r\n//     });\r\n//   };\r\n\r\n//   const addAnswer = (index) => {\r\n//     const questions = [...formData.questions];\r\n//     questions[index].answers.push('');\r\n//     setFormData({ ...formData, questions });\r\n//   };\r\n\r\n//   const removeQuestion = (index) => {\r\n//     const questions = [...formData.questions];\r\n//     questions.splice(index, 1);\r\n//     setFormData({ ...formData, questions });\r\n//   };\r\n\r\n//   const removeAnswer = (questionIndex, answerIndex) => {\r\n//     const questions = [...formData.questions];\r\n//     questions[questionIndex].answers.splice(answerIndex, 1);\r\n//     setFormData({ ...formData, questions });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       // Step 1: Create the survey\r\n//       const surveyResponse = await fetch('http://localhost:3001/surveys', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({\r\n//           title: formData.title,\r\n//           description: formData.description\r\n//         })\r\n//       });\r\n\r\n//       if (!surveyResponse.ok) {\r\n//         throw new Error('Error creating survey');\r\n//       }\r\n\r\n//       const surveyData = await surveyResponse.json();\r\n//       const survey_id = surveyData.survey_id;\r\n\r\n//       // Step 2: Add questions and answers\r\n//       for (let i = 0; i < formData.questions.length; i++) {\r\n//         const question = formData.questions[i];\r\n\r\n//         // Add question\r\n//         const questionResponse = await fetch(`http://localhost:3001/questions/${survey_id}`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json'\r\n//           },\r\n//           body: JSON.stringify({\r\n//             questionText: question.questionText\r\n//           })\r\n//         });\r\n\r\n//         if (!questionResponse.ok) {\r\n//           throw new Error('Error adding question');\r\n//         }\r\n\r\n//         const questionData = await questionResponse.json();\r\n//         const questionId = questionData.question_id;\r\n\r\n//         // Add answers\r\n//         for (let j = 0; j < question.answers.length; j++) {\r\n//           const answer = question.answers[j];\r\n\r\n//           const answerResponse = await fetch(`http://localhost:3001/answers/${questionId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//               answerText: answer\r\n//             })\r\n//           });\r\n\r\n//           if (!answerResponse.ok) {\r\n//             throw new Error('Error adding answer');\r\n//           }\r\n//         }\r\n//       }\r\n\r\n//       // Step 3: Send emails to customers\r\n//       const emailResponse = await fetch('http://localhost:3001/send-emails', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({\r\n//           surveyId: survey_id\r\n//         })\r\n//       });\r\n\r\n//       if (!emailResponse.ok) {\r\n//         throw new Error('Error sending emails');\r\n//       }\r\n\r\n//       alert('Survey created and emails sent successfully!');\r\n//       setFormData({\r\n//         title: '',\r\n//         description: '',\r\n//         questions: [{ questionText: '', answers: [''] }]\r\n//       });\r\n\r\n//       // Redirect to the SurveyLandingPage with the new surveyId\r\n//       navigate(`/survey/${survey_id}`);\r\n      \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//       alert('Error creating survey');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"SurveyCreationForm\">\r\n//       <h1>יצירת סקר</h1>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"form-groupSCF\">\r\n//           <label htmlFor=\"title\" className=\"required\">כותרת הסקר</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"title\"\r\n//             name=\"title\"\r\n//             value={formData.title}\r\n//             onChange={handleInputChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-groupSCF\">\r\n//           <label htmlFor=\"description\" >תיאור הסקר</label>\r\n//           <textarea\r\n//             id=\"description\"\r\n//             name=\"description\"\r\n//             value={formData.description}\r\n//             onChange={handleInputChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         {formData.questions.map((q, index) => (\r\n//           <div key={index} className=\"form-groupSCF\">\r\n//             <label className=\"required\">שאלה {index + 1}</label>\r\n//             <div className=\"question-containerSCF\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"question\"\r\n//                 value={q.questionText}\r\n//                 onChange={(e) => handleInputChange(e, index)}\r\n//                 required\r\n//               />\r\n//               <button type=\"button\" onClick={() => removeQuestion(index)}>\r\n//                 X\r\n//               </button>\r\n//             </div>\r\n//             <label className='required'> תשובות: </label>\r\n//             {q.answers.map((answer, answerIndex) => (\r\n//               <div key={answerIndex} className=\"answer-containerSCF\">\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"answer\"\r\n//                   value={answer}\r\n//                   onChange={(e) => handleInputChange(e, index, answerIndex)}\r\n//                   required\r\n//                 />\r\n//                 <button type=\"button\" onClick={() => removeAnswer(index, answerIndex)}>\r\n//                   X\r\n//                 </button>\r\n//               </div>\r\n//             ))}\r\n//             <button type=\"button\" onClick={() => addAnswer(index)}>הוסף תשובה</button>\r\n//           </div>\r\n//         ))}\r\n//         <button type=\"button\" onClick={addQuestion}>הוסף שאלה</button>\r\n//         <div>\r\n//           <button type=\"submit\">סיים ושלח</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SurveyCreationForm;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}