{"ast":null,"code":"var _jsxFileName = \"/Users/danatorgovitsky/Desktop/Project/Triangle/my-app/src/pages/Survey/SurveyCreationForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import '../../css/SurveyCreationForm.css';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\n// const SurveyCreationForm = () => {\n//   const [formData, setFormData] = useState({\n//     title: '',\n//     description: '',\n//     questions: [{ questionText: '', answers: [''] }]\n//   });\n\n//   const navigate = useNavigate();\n\n//   const handleInputChange = (e, index, answerIndex) => {\n//     const { name, value } = e.target;\n//     if (name === 'question') {\n//       const questions = [...formData.questions];\n//       questions[index].questionText = value;\n//       setFormData({ ...formData, questions });\n//     } else if (name === 'answer') {\n//       const questions = [...formData.questions];\n//       questions[index].answers[answerIndex] = value;\n//       setFormData({ ...formData, questions });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   const addQuestion = () => {\n//     setFormData({\n//       ...formData,\n//       questions: [...formData.questions, { questionText: '', answers: [''] }]\n//     });\n//   };\n\n//   const addAnswer = (index) => {\n//     const questions = [...formData.questions];\n//     questions[index].answers.push('');\n//     setFormData({ ...formData, questions });\n//   };\n\n//   const removeQuestion = (index) => {\n//     const questions = [...formData.questions];\n//     questions.splice(index, 1);\n//     setFormData({ ...formData, questions });\n//   };\n\n//   const removeAnswer = (questionIndex, answerIndex) => {\n//     const questions = [...formData.questions];\n//     questions[questionIndex].answers.splice(answerIndex, 1);\n//     setFormData({ ...formData, questions });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       // Step 1: Create the survey\n//       const surveyResponse = await fetch('http://localhost:3001/surveys', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           title: formData.title,\n//           description: formData.description\n//         })\n//       });\n\n//       if (!surveyResponse.ok) {\n//         throw new Error('Error creating survey');\n//       }\n\n//       const surveyData = await surveyResponse.json();\n//       const survey_id = surveyData.survey_id;\n\n//       // Step 2: Add questions and answers\n//       for (let i = 0; i < formData.questions.length; i++) {\n//         const question = formData.questions[i];\n\n//         // Add question\n//         const questionResponse = await fetch(`http://localhost:3001/questions/${survey_id}`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify({\n//             questionText: question.questionText\n//           })\n//         });\n\n//         if (!questionResponse.ok) {\n//           throw new Error('Error adding question');\n//         }\n\n//         const questionData = await questionResponse.json();\n//         const questionId = questionData.question_id;\n\n//         // Add answers\n//         for (let j = 0; j < question.answers.length; j++) {\n//           const answer = question.answers[j];\n\n//           const answerResponse = await fetch(`http://localhost:3001/answers/${questionId}`, {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify({\n//               answerText: answer\n//             })\n//           });\n\n//           if (!answerResponse.ok) {\n//             throw new Error('Error adding answer');\n//           }\n//         }\n//       }\n\n//       // Step 3: Send emails to customers\n//       const emailResponse = await fetch('http://localhost:3001/send-emails', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           surveyId: survey_id\n//         })\n//       });\n\n//       if (!emailResponse.ok) {\n//         throw new Error('Error sending emails');\n//       }\n\n//       alert('Survey created and emails sent successfully!');\n//       setFormData({\n//         title: '',\n//         description: '',\n//         questions: [{ questionText: '', answers: [''] }]\n//       });\n\n//       // Redirect to the SurveyLandingPage with the new surveyId\n//       navigate(`/survey/${survey_id}`);\n\n//     } catch (error) {\n//       console.error('Error:', error);\n//       alert('Error creating survey');\n//     }\n//   };\n\n//   return (\n//     <div className=\"SurveyCreationForm\">\n//       <h1>יצירת סקר</h1>\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"form-groupSCF\">\n//           <label htmlFor=\"title\" className=\"required\">כותרת הסקר</label>\n//           <input\n//             type=\"text\"\n//             id=\"title\"\n//             name=\"title\"\n//             value={formData.title}\n//             onChange={handleInputChange}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-groupSCF\">\n//           <label htmlFor=\"description\" >תיאור הסקר</label>\n//           <textarea\n//             id=\"description\"\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleInputChange}\n//             required\n//           />\n//         </div>\n//         {formData.questions.map((q, index) => (\n//           <div key={index} className=\"form-groupSCF\">\n//             <label className=\"required\">שאלה {index + 1}</label>\n//             <div className=\"question-containerSCF\">\n//               <input\n//                 type=\"text\"\n//                 name=\"question\"\n//                 value={q.questionText}\n//                 onChange={(e) => handleInputChange(e, index)}\n//                 required\n//               />\n//               <button type=\"button\" onClick={() => removeQuestion(index)}>\n//                 X\n//               </button>\n//             </div>\n//             <label className='required'> תשובות: </label>\n//             {q.answers.map((answer, answerIndex) => (\n//               <div key={answerIndex} className=\"answer-containerSCF\">\n//                 <input\n//                   type=\"text\"\n//                   name=\"answer\"\n//                   value={answer}\n//                   onChange={(e) => handleInputChange(e, index, answerIndex)}\n//                   required\n//                 />\n//                 <button type=\"button\" onClick={() => removeAnswer(index, answerIndex)}>\n//                   X\n//                 </button>\n//               </div>\n//             ))}\n//             <button type=\"button\" onClick={() => addAnswer(index)}>הוסף תשובה</button>\n//           </div>\n//         ))}\n//         <button type=\"button\" onClick={addQuestion}>הוסף שאלה</button>\n//         <div>\n//           <button type=\"submit\">סיים ושלח</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default SurveyCreationForm;\n\nimport React, { useState } from 'react';\nimport './SurveyCreationForm.css';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurveyCreationForm = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    questions: [{\n      questionText: '',\n      answers: ['']\n    }]\n  });\n  const handleBackClick = () => {\n    navigate('/club-management');\n  };\n  const navigate = useNavigate();\n  const handleInputChange = (e, index, answerIndex) => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'question') {\n      const questions = [...formData.questions];\n      questions[index].questionText = value;\n      setFormData({\n        ...formData,\n        questions\n      });\n    } else if (name === 'answer') {\n      const questions = [...formData.questions];\n      questions[index].answers[answerIndex] = value;\n      setFormData({\n        ...formData,\n        questions\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    }\n  };\n  const addQuestion = () => {\n    setFormData({\n      ...formData,\n      questions: [...formData.questions, {\n        questionText: '',\n        answers: ['']\n      }]\n    });\n  };\n  const addAnswer = index => {\n    const questions = [...formData.questions];\n    questions[index].answers.push('');\n    setFormData({\n      ...formData,\n      questions\n    });\n  };\n  const removeQuestion = index => {\n    const questions = [...formData.questions];\n    questions.splice(index, 1);\n    setFormData({\n      ...formData,\n      questions\n    });\n  };\n  const removeAnswer = (questionIndex, answerIndex) => {\n    const questions = [...formData.questions];\n    questions[questionIndex].answers.splice(answerIndex, 1);\n    setFormData({\n      ...formData,\n      questions\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Step 1: Create the survey\n      const surveyResponse = await fetch('http://localhost:3001/surveys', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: formData.title,\n          description: formData.description\n        })\n      });\n      if (!surveyResponse.ok) {\n        throw new Error('Error creating survey');\n      }\n      const surveyData = await surveyResponse.json();\n      const survey_id = surveyData.survey_id;\n\n      // Step 2: Add questions and answers\n      for (let i = 0; i < formData.questions.length; i++) {\n        const question = formData.questions[i];\n\n        // Add question\n        const questionResponse = await fetch(`http://localhost:3001/questions/${survey_id}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            questionText: question.questionText\n          })\n        });\n        if (!questionResponse.ok) {\n          throw new Error('Error adding question');\n        }\n        const questionData = await questionResponse.json();\n        const questionId = questionData.question_id;\n\n        // Add answers\n        for (let j = 0; j < question.answers.length; j++) {\n          const answer = question.answers[j];\n          const answerResponse = await fetch(`http://localhost:3001/answers/${questionId}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              answerText: answer\n            })\n          });\n          if (!answerResponse.ok) {\n            throw new Error('Error adding answer');\n          }\n        }\n      }\n\n      // Step 3: Send emails to customers\n      const emailResponse = await fetch('http://localhost:3001/send-emails', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          surveyId: survey_id\n        })\n      });\n      if (!emailResponse.ok) {\n        throw new Error('Error sending emails');\n      }\n      alert('Survey created and emails sent successfully!');\n      setFormData({\n        title: '',\n        description: '',\n        questions: [{\n          questionText: '',\n          answers: ['']\n        }]\n      });\n\n      // Redirect to the SurveyLandingPage with the new surveyId\n      navigate(`/survey/${survey_id}`);\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Error creating survey');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FullPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-button\",\n      onClick: handleBackClick,\n      children: \"< Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"survey_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u05D9\\u05E6\\u05D9\\u05E8\\u05EA \\u05E1\\u05E7\\u05E8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-groupSCF\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            className: \"required\",\n            children: \"\\u05DB\\u05D5\\u05EA\\u05E8\\u05EA \\u05D4\\u05E1\\u05E7\\u05E8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            name: \"title\",\n            value: formData.title,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-groupSCF\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: \"\\u05EA\\u05D9\\u05D0\\u05D5\\u05E8 \\u05D4\\u05E1\\u05E7\\u05E8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            name: \"description\",\n            value: formData.description,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), formData.questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-groupSCF\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"required\",\n            children: [\"\\u05E9\\u05D0\\u05DC\\u05D4 \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-containerSCF\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"question\",\n              value: q.questionText,\n              onChange: e => handleInputChange(e, index),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeQuestion(index),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"required\",\n            children: \" \\u05EA\\u05E9\\u05D5\\u05D1\\u05D5\\u05EA: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this), q.answers.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer-containerSCF\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"answer\",\n              value: answer,\n              onChange: e => handleInputChange(e, index, answerIndex),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => removeAnswer(index, answerIndex),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 19\n            }, this)]\n          }, answerIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"submit-button\",\n            onClick: () => addAnswer(index),\n            children: \"\\u05D4\\u05D5\\u05E1\\u05E3 \\u05EA\\u05E9\\u05D5\\u05D1\\u05D4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"submit-button\",\n          onClick: addQuestion,\n          children: \"\\u05D4\\u05D5\\u05E1\\u05E3 \\u05E9\\u05D0\\u05DC\\u05D4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-button\",\n            children: \"\\u05E1\\u05D9\\u05D9\\u05DD \\u05D5\\u05E9\\u05DC\\u05D7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n};\n_s(SurveyCreationForm, \"1RZ4EQ5jCHyVrtf7kRUGJJNim74=\", false, function () {\n  return [useNavigate];\n});\n_c = SurveyCreationForm;\nexport default SurveyCreationForm;\nvar _c;\n$RefreshReg$(_c, \"SurveyCreationForm\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jsxDEV","_jsxDEV","SurveyCreationForm","_s","formData","setFormData","title","description","questions","questionText","answers","handleBackClick","navigate","handleInputChange","e","index","answerIndex","name","value","target","addQuestion","addAnswer","push","removeQuestion","splice","removeAnswer","questionIndex","handleSubmit","preventDefault","surveyResponse","fetch","method","headers","body","JSON","stringify","ok","Error","surveyData","json","survey_id","i","length","question","questionResponse","questionData","questionId","question_id","j","answer","answerResponse","answerText","emailResponse","surveyId","alert","error","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","map","q","_c","$RefreshReg$"],"sources":["/Users/danatorgovitsky/Desktop/Project/Triangle/my-app/src/pages/Survey/SurveyCreationForm.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import '../../css/SurveyCreationForm.css';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const SurveyCreationForm = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     title: '',\r\n//     description: '',\r\n//     questions: [{ questionText: '', answers: [''] }]\r\n//   });\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleInputChange = (e, index, answerIndex) => {\r\n//     const { name, value } = e.target;\r\n//     if (name === 'question') {\r\n//       const questions = [...formData.questions];\r\n//       questions[index].questionText = value;\r\n//       setFormData({ ...formData, questions });\r\n//     } else if (name === 'answer') {\r\n//       const questions = [...formData.questions];\r\n//       questions[index].answers[answerIndex] = value;\r\n//       setFormData({ ...formData, questions });\r\n//     } else {\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n//   const addQuestion = () => {\r\n//     setFormData({\r\n//       ...formData,\r\n//       questions: [...formData.questions, { questionText: '', answers: [''] }]\r\n//     });\r\n//   };\r\n\r\n//   const addAnswer = (index) => {\r\n//     const questions = [...formData.questions];\r\n//     questions[index].answers.push('');\r\n//     setFormData({ ...formData, questions });\r\n//   };\r\n\r\n//   const removeQuestion = (index) => {\r\n//     const questions = [...formData.questions];\r\n//     questions.splice(index, 1);\r\n//     setFormData({ ...formData, questions });\r\n//   };\r\n\r\n//   const removeAnswer = (questionIndex, answerIndex) => {\r\n//     const questions = [...formData.questions];\r\n//     questions[questionIndex].answers.splice(answerIndex, 1);\r\n//     setFormData({ ...formData, questions });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       // Step 1: Create the survey\r\n//       const surveyResponse = await fetch('http://localhost:3001/surveys', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({\r\n//           title: formData.title,\r\n//           description: formData.description\r\n//         })\r\n//       });\r\n\r\n//       if (!surveyResponse.ok) {\r\n//         throw new Error('Error creating survey');\r\n//       }\r\n\r\n//       const surveyData = await surveyResponse.json();\r\n//       const survey_id = surveyData.survey_id;\r\n\r\n//       // Step 2: Add questions and answers\r\n//       for (let i = 0; i < formData.questions.length; i++) {\r\n//         const question = formData.questions[i];\r\n\r\n//         // Add question\r\n//         const questionResponse = await fetch(`http://localhost:3001/questions/${survey_id}`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json'\r\n//           },\r\n//           body: JSON.stringify({\r\n//             questionText: question.questionText\r\n//           })\r\n//         });\r\n\r\n//         if (!questionResponse.ok) {\r\n//           throw new Error('Error adding question');\r\n//         }\r\n\r\n//         const questionData = await questionResponse.json();\r\n//         const questionId = questionData.question_id;\r\n\r\n//         // Add answers\r\n//         for (let j = 0; j < question.answers.length; j++) {\r\n//           const answer = question.answers[j];\r\n\r\n//           const answerResponse = await fetch(`http://localhost:3001/answers/${questionId}`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json'\r\n//             },\r\n//             body: JSON.stringify({\r\n//               answerText: answer\r\n//             })\r\n//           });\r\n\r\n//           if (!answerResponse.ok) {\r\n//             throw new Error('Error adding answer');\r\n//           }\r\n//         }\r\n//       }\r\n\r\n//       // Step 3: Send emails to customers\r\n//       const emailResponse = await fetch('http://localhost:3001/send-emails', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({\r\n//           surveyId: survey_id\r\n//         })\r\n//       });\r\n\r\n//       if (!emailResponse.ok) {\r\n//         throw new Error('Error sending emails');\r\n//       }\r\n\r\n//       alert('Survey created and emails sent successfully!');\r\n//       setFormData({\r\n//         title: '',\r\n//         description: '',\r\n//         questions: [{ questionText: '', answers: [''] }]\r\n//       });\r\n\r\n//       // Redirect to the SurveyLandingPage with the new surveyId\r\n//       navigate(`/survey/${survey_id}`);\r\n      \r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//       alert('Error creating survey');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"SurveyCreationForm\">\r\n//       <h1>יצירת סקר</h1>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"form-groupSCF\">\r\n//           <label htmlFor=\"title\" className=\"required\">כותרת הסקר</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"title\"\r\n//             name=\"title\"\r\n//             value={formData.title}\r\n//             onChange={handleInputChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-groupSCF\">\r\n//           <label htmlFor=\"description\" >תיאור הסקר</label>\r\n//           <textarea\r\n//             id=\"description\"\r\n//             name=\"description\"\r\n//             value={formData.description}\r\n//             onChange={handleInputChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         {formData.questions.map((q, index) => (\r\n//           <div key={index} className=\"form-groupSCF\">\r\n//             <label className=\"required\">שאלה {index + 1}</label>\r\n//             <div className=\"question-containerSCF\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"question\"\r\n//                 value={q.questionText}\r\n//                 onChange={(e) => handleInputChange(e, index)}\r\n//                 required\r\n//               />\r\n//               <button type=\"button\" onClick={() => removeQuestion(index)}>\r\n//                 X\r\n//               </button>\r\n//             </div>\r\n//             <label className='required'> תשובות: </label>\r\n//             {q.answers.map((answer, answerIndex) => (\r\n//               <div key={answerIndex} className=\"answer-containerSCF\">\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"answer\"\r\n//                   value={answer}\r\n//                   onChange={(e) => handleInputChange(e, index, answerIndex)}\r\n//                   required\r\n//                 />\r\n//                 <button type=\"button\" onClick={() => removeAnswer(index, answerIndex)}>\r\n//                   X\r\n//                 </button>\r\n//               </div>\r\n//             ))}\r\n//             <button type=\"button\" onClick={() => addAnswer(index)}>הוסף תשובה</button>\r\n//           </div>\r\n//         ))}\r\n//         <button type=\"button\" onClick={addQuestion}>הוסף שאלה</button>\r\n//         <div>\r\n//           <button type=\"submit\">סיים ושלח</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SurveyCreationForm;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport './SurveyCreationForm.css';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst SurveyCreationForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    questions: [{ questionText: '', answers: [''] }]\r\n  });\r\n\r\n  const handleBackClick = () => {\r\n    navigate('/club-management');\r\n  }\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleInputChange = (e, index, answerIndex) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'question') {\r\n      const questions = [...formData.questions];\r\n      questions[index].questionText = value;\r\n      setFormData({ ...formData, questions });\r\n    } else if (name === 'answer') {\r\n      const questions = [...formData.questions];\r\n      questions[index].answers[answerIndex] = value;\r\n      setFormData({ ...formData, questions });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n  };\r\n\r\n  const addQuestion = () => {\r\n    setFormData({\r\n      ...formData,\r\n      questions: [...formData.questions, { questionText: '', answers: [''] }]\r\n    });\r\n  };\r\n\r\n  const addAnswer = (index) => {\r\n    const questions = [...formData.questions];\r\n    questions[index].answers.push('');\r\n    setFormData({ ...formData, questions });\r\n  };\r\n\r\n  const removeQuestion = (index) => {\r\n    const questions = [...formData.questions];\r\n    questions.splice(index, 1);\r\n    setFormData({ ...formData, questions });\r\n  };\r\n\r\n  const removeAnswer = (questionIndex, answerIndex) => {\r\n    const questions = [...formData.questions];\r\n    questions[questionIndex].answers.splice(answerIndex, 1);\r\n    setFormData({ ...formData, questions });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      // Step 1: Create the survey\r\n      const surveyResponse = await fetch('http://localhost:3001/surveys', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          title: formData.title,\r\n          description: formData.description\r\n        })\r\n      });\r\n\r\n      if (!surveyResponse.ok) {\r\n        throw new Error('Error creating survey');\r\n      }\r\n\r\n      const surveyData = await surveyResponse.json();\r\n      const survey_id = surveyData.survey_id;\r\n\r\n      // Step 2: Add questions and answers\r\n      for (let i = 0; i < formData.questions.length; i++) {\r\n        const question = formData.questions[i];\r\n\r\n        // Add question\r\n        const questionResponse = await fetch(`http://localhost:3001/questions/${survey_id}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            questionText: question.questionText\r\n          })\r\n        });\r\n\r\n        if (!questionResponse.ok) {\r\n          throw new Error('Error adding question');\r\n        }\r\n\r\n        const questionData = await questionResponse.json();\r\n        const questionId = questionData.question_id;\r\n\r\n        // Add answers\r\n        for (let j = 0; j < question.answers.length; j++) {\r\n          const answer = question.answers[j];\r\n\r\n          const answerResponse = await fetch(`http://localhost:3001/answers/${questionId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              answerText: answer\r\n            })\r\n          });\r\n\r\n          if (!answerResponse.ok) {\r\n            throw new Error('Error adding answer');\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Send emails to customers\r\n      const emailResponse = await fetch('http://localhost:3001/send-emails', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          surveyId: survey_id\r\n        })\r\n      });\r\n\r\n      if (!emailResponse.ok) {\r\n        throw new Error('Error sending emails');\r\n      }\r\n\r\n      alert('Survey created and emails sent successfully!');\r\n      setFormData({\r\n        title: '',\r\n        description: '',\r\n        questions: [{ questionText: '', answers: [''] }]\r\n      });\r\n\r\n      // Redirect to the SurveyLandingPage with the new surveyId\r\n      navigate(`/survey/${survey_id}`);\r\n      \r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      alert('Error creating survey');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"FullPage\">\r\n      <div className=\"back-button\" onClick={handleBackClick}>\r\n        &lt; Back\r\n      </div>\r\n      <div className=\"survey_container\">\r\n        <h2>יצירת סקר</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-groupSCF\">\r\n            <label htmlFor=\"title\" className=\"required\">כותרת הסקר</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"title\"\r\n              name=\"title\"\r\n              value={formData.title}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-groupSCF\">\r\n            <label htmlFor=\"description\" >תיאור הסקר</label>\r\n            <textarea\r\n              id=\"description\"\r\n              name=\"description\"\r\n              value={formData.description}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n          {formData.questions.map((q, index) => (\r\n            <div key={index} className=\"form-groupSCF\">\r\n              <label className=\"required\">שאלה {index + 1}</label>\r\n              <div className=\"question-containerSCF\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"question\"\r\n                  value={q.questionText}\r\n                  onChange={(e) => handleInputChange(e, index)}\r\n                  required\r\n                />\r\n                <button type=\"button\" onClick={() => removeQuestion(index)}>\r\n                  X\r\n                </button>\r\n              </div>\r\n              <label className='required'> תשובות: </label>\r\n              {q.answers.map((answer, answerIndex) => (\r\n                <div key={answerIndex} className=\"answer-containerSCF\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"answer\"\r\n                    value={answer}\r\n                    onChange={(e) => handleInputChange(e, index, answerIndex)}\r\n                    required\r\n                  />\r\n                  <button type=\"button\" onClick={() => removeAnswer(index, answerIndex)}>\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))}\r\n              <button type=\"button\" className=\"submit-button\" onClick={() => addAnswer(index)}>הוסף תשובה</button>\r\n            </div>\r\n          ))}\r\n          <button type=\"button\" className=\"submit-button\" onClick={addQuestion}>הוסף שאלה</button>\r\n          <div>\r\n            <button type=\"submit\" className=\"submit-button\" >סיים ושלח</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SurveyCreationForm;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,0BAA0B;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}